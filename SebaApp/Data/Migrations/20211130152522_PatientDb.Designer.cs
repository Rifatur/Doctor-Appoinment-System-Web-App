// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SebaApp.Data;

namespace SebaApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211130152522_PatientDb")]
    partial class PatientDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SebaApp.Models.AccountBalance", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<int>("PatienID")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("AccountId");

                    b.HasIndex("PatienID")
                        .IsUnique();

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("SebaApp.Models.Appointment", b =>
                {
                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatienID")
                        .HasColumnType("int");

                    b.Property<string>("About_Appointment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppoinmentDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("AppointmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeSlot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("appointID")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("date");

                    b.HasKey("doctorID", "PatienID");

                    b.HasIndex("PatienID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SebaApp.Models.Doctor", b =>
                {
                    b.Property<int>("doctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("date");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("doctorID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("SebaApp.Models.DoctorImage", b =>
                {
                    b.Property<int>("DimageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.Property<string>("doctorImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DimageID");

                    b.HasIndex("doctorID");

                    b.ToTable("DoctorImages");
                });

            modelBuilder.Entity("SebaApp.Models.DoctorInformation", b =>
                {
                    b.Property<int>("infoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("date");

                    b.Property<string>("Experiance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialistIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.Property<string>("officeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("infoID");

                    b.HasIndex("doctorID")
                        .IsUnique();

                    b.ToTable("DoctorInformation");
                });

            modelBuilder.Entity("SebaApp.Models.Patient", b =>
                {
                    b.Property<int>("PatienID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatienCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("PatienID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("SebaApp.Models.PatientInformation", b =>
                {
                    b.Property<int>("PatientinfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bloodgroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatienID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientinfoID");

                    b.HasIndex("PatienID")
                        .IsUnique();

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("SebaApp.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SetDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.HasKey("ScheduleID");

                    b.HasIndex("doctorID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SebaApp.Models.VisitingPrice", b =>
                {
                    b.Property<int>("priceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstVisit")
                        .HasColumnType("int");

                    b.Property<int>("SecondVisit")
                        .HasColumnType("int");

                    b.Property<int>("doctorID")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("priceID");

                    b.HasIndex("doctorID")
                        .IsUnique();

                    b.ToTable("visitingPrices");
                });

            modelBuilder.Entity("SebaApp.Models.AccountBalance", b =>
                {
                    b.HasOne("SebaApp.Models.Patient", "Patient")
                        .WithOne("AccountBalance")
                        .HasForeignKey("SebaApp.Models.AccountBalance", "PatienID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SebaApp.Models.Appointment", b =>
                {
                    b.HasOne("SebaApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatienID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SebaApp.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("doctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SebaApp.Models.DoctorImage", b =>
                {
                    b.HasOne("SebaApp.Models.Doctor", "Doctor")
                        .WithMany("DoctorImages")
                        .HasForeignKey("doctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("SebaApp.Models.DoctorInformation", b =>
                {
                    b.HasOne("SebaApp.Models.Doctor", "Doctor")
                        .WithOne("DoctorInformation")
                        .HasForeignKey("SebaApp.Models.DoctorInformation", "doctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("SebaApp.Models.PatientInformation", b =>
                {
                    b.HasOne("SebaApp.Models.Patient", "Patient")
                        .WithOne("PatientInformation")
                        .HasForeignKey("SebaApp.Models.PatientInformation", "PatienID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SebaApp.Models.Schedule", b =>
                {
                    b.HasOne("SebaApp.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("doctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("SebaApp.Models.VisitingPrice", b =>
                {
                    b.HasOne("SebaApp.Models.Doctor", "Doctor")
                        .WithOne("VisitingPrice")
                        .HasForeignKey("SebaApp.Models.VisitingPrice", "doctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("SebaApp.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorImages");

                    b.Navigation("DoctorInformation");

                    b.Navigation("Schedules");

                    b.Navigation("VisitingPrice");
                });

            modelBuilder.Entity("SebaApp.Models.Patient", b =>
                {
                    b.Navigation("AccountBalance");

                    b.Navigation("Appointments");

                    b.Navigation("PatientInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
